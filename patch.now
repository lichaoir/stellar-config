diff --git a/src/client/action-creators/ui/ingestion-profile.js b/src/client/action-creators/ui/ingestion-profile.js
index 997eafb..7d2c3b6 100644
--- a/src/client/action-creators/ui/ingestion-profile.js
+++ b/src/client/action-creators/ui/ingestion-profile.js
@@ -90,6 +90,14 @@ function loadSampleAsync(source) {
     .then(R.compose(dispatch, loadSample));
 }
 
+function revealNewNode() {
+  return {type: actions.INGESTION_PROFILE_REVEAL_NEW_NODE};
+}
+
+function revealNewLink() {
+  return {type: actions.INGESTION_PROFILE_REVEAL_NEW_LINK};
+}
+
 module.exports = {
   setSelectedSource,
   setNewSource,
@@ -106,4 +114,6 @@ module.exports = {
   setActiveTab,
   loadSample,
   loadSampleAsync,
+  revealNewNode,
+  revealNewLink,
 };
diff --git a/src/client/actions.js b/src/client/actions.js
index a8807c5..0c4c14a 100644
--- a/src/client/actions.js
+++ b/src/client/actions.js
@@ -35,6 +35,8 @@ module.exports = {
   INGESTION_PROFILE_SET_SELECTED_SOURCE: 'INGESTION_PROFILE_SET_SELECTED_SOURCE',
   INGESTION_PROFILE_SET_ACTIVE_TAB: 'INGESTION_PROFILE_SET_ACTIVE_TAB',
   INGESTION_PROFILE_DELETE_SOURCE: 'INGESTION_PROFILE_DELETE_SOURCE',
+  INGESTION_PROFILE_REVEAL_NEW_NODE: 'INGESTION_PROFILE_REVEAL_NEW_NODE',
+  INGESTION_PROFILE_REVEAL_NEW_LINK: 'INGESTION_PROFILE_REVEAL_NEW_LINK',
   SEARCH_HIDE: 'SEARCH_HIDE',
   SEARCH_LOAD_NAMES: 'SEARCH_LOAD_NAMES',
   SEARCH_LOAD_CONFIG_TYPES: 'SEARCH_LOAD_CONFIG_TYPES',
diff --git a/src/client/components/ingestion-profile-mapping-view.jsx b/src/client/components/ingestion-profile-mapping-view.jsx
new file mode 100644
index 0000000..79b0473
--- /dev/null
+++ b/src/client/components/ingestion-profile-mapping-view.jsx
@@ -0,0 +1,104 @@
+const React = require('react');
+const FullView = require('./full-view.jsx');
+const DropDownMenu = require('./drop-down-menu.jsx');
+const {isNotEmpty} = require('../util');
+
+const ControlPanel = ({handleNodeButtonClick, handleLinkButtonClick}) =>
+  <div className="field is-grouped">
+    <div className="control">
+      <button className="button" onClick={() => handleNodeButtonClick()}>
+        <span className="icon">
+          <i className="fa fa-plus"></i>
+        </span>
+        <span>Node</span>
+      </button>
+    </div>
+    <div className="control">
+      <button className="button" onClick={() => handleLinkButtonClick()}>
+        <span className="icon">
+          <i className="fa fa-plus"></i>
+        </span>
+        <span>Link</span>
+      </button>
+    </div>
+  </div>;
+
+const NewNodePanel =
+  ({
+    className,
+    dropDownMenuActive,
+  }) =>
+    [
+      <div className="field" key="class">
+        <label className="label">Type</label>
+        <DropDownMenu
+          buttonText={isNotEmpty(className) ? className : '(None)'}
+          active={dropDownMenuActive}
+          itemLists={[['Person', 'Place'], ['name', 'age']]}
+          activeItems={['Person']}
+          handleItemClick={() => {}}
+          handleButtonClick={() => {}} />
+      </div>,
+      <div className="field" key="prop-to-column">
+        <label className="label">
+          Property
+          <span className="icon">
+            <i className="fa fa-long-arrow-right"></i>
+          </span>
+          Column
+        </label>
+        <div>
+          <DropDownMenu
+            buttonText={isNotEmpty(className) ? className : '(None)'}
+            active={dropDownMenuActive}
+            itemLists={[['Person', 'Place'], ['name', 'age']]}
+            activeItems={['Person']}
+            handleItemClick={() => {}}
+            handleButtonClick={() => {}} />
+          <span className="icon">
+            <i className="fa fa-long-arrow-right"></i>
+          </span>
+          <DropDownMenu
+            buttonText={isNotEmpty(className) ? className : '(None)'}
+            active={dropDownMenuActive}
+            itemLists={[['Person', 'Place'], ['name', 'age']]}
+            activeItems={['Person']}
+            handleItemClick={() => {}}
+            handleButtonClick={() => {}} />
+        </div>
+      </div>,
+    ];
+
+module.exports =
+  ({
+    newNodeVisible,
+    newLinkVisible,
+    handleAddNodeButtonClick,
+    handleAddLinkButtonClick,
+  }) =>
+    <FullView>
+      <div className="ingestion-profile-mapping-view">
+        <div className="container">
+          <div className="tile is-ancestor">
+            <div className="tile is-verticle is-6 is-parent">
+              <div className="tile is-child">
+                {
+                  !newNodeVisible && !newLinkVisible && (
+                    <ControlPanel
+                      handleNodeButtonClick={handleAddNodeButtonClick}
+                      handleLinkButtonClick={handleAddLinkButtonClick} />
+                  )
+                }
+                {
+                  newNodeVisible && (
+                    <NewNodePanel dropDownMenuActive={false} />
+                  )
+                }
+              </div>
+            </div>
+            <div className="tile is-verticle is-6">
+            </div>
+          </div>
+        </div>
+      </div>
+    </FullView>;
diff --git a/src/client/components/ingestion-profile-source-view.jsx b/src/client/components/ingestion-profile-source-view.jsx
index f3236b1..68f632e 100644
--- a/src/client/components/ingestion-profile-source-view.jsx
+++ b/src/client/components/ingestion-profile-source-view.jsx
@@ -6,8 +6,8 @@ const DeleteSource = require('./ingestion-profile-delete-source.jsx');
 const FullView = require('./full-view.jsx');
 const {isNotEmpty} = require('../util');
 
-module.exports = (props) => {
-  const {
+module.exports =
+  ({
     newSourceVisible,
     newSource,
     deleteSourceVisible,
@@ -23,11 +23,9 @@ module.exports = (props) => {
     handleNewSourceCancelButtonClick,
     handleDeleteSourceYesButtonClick,
     handleDeleteSourceCancelButtonClick,
-  } = props;
-
-  return (
+  }) =>
     <FullView>
-      <div className="ingestion-profile">
+      <div className="ingestion-profile-source-view">
         <div className="control-pane">
           <div className="box">
             <Sources
@@ -64,6 +62,4 @@ module.exports = (props) => {
           )
         }
       </div>
-    </FullView>
-  );
-};
+    </FullView>;
diff --git a/src/client/components/ingestion-profile-view.jsx b/src/client/components/ingestion-profile-view.jsx
index 82f45d4..7c7445b 100644
--- a/src/client/components/ingestion-profile-view.jsx
+++ b/src/client/components/ingestion-profile-view.jsx
@@ -4,17 +4,20 @@ const SplitView = require('./split-view.jsx');
 const {
   TAB_SOURCE,
   TAB_GRAPH_SCHEMA,
+  TAB_MAPPING,
 } = require('../ingestion-profile');
 
 const {isNotEmpty} = require('../util');
 
-module.exports = ({name, activeTab, SourceView, GraphSchema, ConfigEditor}) => {
+module.exports = ({name, activeTab, SourceView, GraphSchema, ConfigEditor, MappingView}) => {
   if (isNotEmpty(name)) {
     switch (activeTab) {
       case TAB_SOURCE:
         return <SourceView />;
       case TAB_GRAPH_SCHEMA:
         return <SplitView><ConfigEditor /><GraphSchema /></SplitView>;
+      case TAB_MAPPING:
+        return <MappingView />;
     }
   }
 
diff --git a/src/client/containers/ingestion-profile-mapping-view.jsx b/src/client/containers/ingestion-profile-mapping-view.jsx
new file mode 100644
index 0000000..782431a
--- /dev/null
+++ b/src/client/containers/ingestion-profile-mapping-view.jsx
@@ -0,0 +1,30 @@
+const R = require('ramda');
+const {connect} = require('react-redux');
+const MappingView = require('../components/ingestion-profile-mapping-view.jsx');
+
+const {
+  newNodeVisibleSelector,
+  newLinkVisibleSelector,
+} = require('../selectors/ui/ingestion-profile');
+
+const {
+  revealNewNode,
+  revealNewLink,
+} = require('../action-creators/ui/ingestion-profile');
+
+function mapStateToProps(state) {
+  return {
+    newNodeVisible: newNodeVisibleSelector(state),
+    newLinkVisible: newLinkVisibleSelector(state),
+  };
+}
+
+function mapDispatchToProps(dispatch) {
+  return {
+    handleAddNodeButtonClick: R.compose(dispatch, revealNewNode),
+
+    handleAddLinkButtonClick: R.compose(dispatch, revealNewLink),
+  };
+}
+
+module.exports = connect(mapStateToProps, mapDispatchToProps)(MappingView);
diff --git a/src/client/containers/ingestion-profile-view.jsx b/src/client/containers/ingestion-profile-view.jsx
index 42488c4..0bc7fb5 100644
--- a/src/client/containers/ingestion-profile-view.jsx
+++ b/src/client/containers/ingestion-profile-view.jsx
@@ -5,6 +5,7 @@ const View = require('../components/ingestion-profile-view.jsx');
 const SourceView = require('./ingestion-profile-source-view.jsx');
 const GraphSchema = require('./graph-schema.jsx');
 const ConfigEditor = require('./config-editor.jsx');
+const MappingView = require('./ingestion-profile-mapping-view.jsx');
 
 const {activeTabSelector} = require('../selectors/ui/ingestion-profile');
 const {nameSelector} = require('../selectors/ingestion-profile');
@@ -22,5 +23,6 @@ module.exports = connect(mapStateToProps)(
       SourceView={SourceView}
       GraphSchema={GraphSchema}
       ConfigEditor={ConfigEditor}
+      MappingView={MappingView}
       {...props} />
 );
diff --git a/src/client/graph-schema.js b/src/client/graph-schema.js
index 4695627..c2240b7 100644
--- a/src/client/graph-schema.js
+++ b/src/client/graph-schema.js
@@ -60,6 +60,18 @@ function createClass(
   return cls;
 }
 
+/**
+ * Extracts properties of a class for persistence.
+ * @param {object} cls 
+ * @return {object}
+ */
+function createPersistentClass(cls) {
+  return {
+    name: cls.name,
+    props: R.clone(cls.props),
+  };
+}
+
 /**
  * Creates a class link.
  *
@@ -99,6 +111,19 @@ function createClassLink(
   return classLink;
 }
 
+/**
+ * Extracts properties of a class link for persistence.
+ * @param {object} classLink 
+ * @return {object}
+ */
+function createPersistentClassLink(classLink) {
+  return {
+    name: classLink.name,
+    source: classLink.source,
+    target: classLink.target,
+  };
+}
+
 /**
  * Extracts name, source and target from a class link to form an ID.
  * @param {object | Map} classLink
@@ -191,7 +216,9 @@ function parseYaml(yamlDoc) {
 
 module.exports = {
   createClass,
+  createPersistentClass,
   createClassLink,
+  createPersistentClassLink,
   getClassLinkId,
   getClassLinkKey,
   parseYaml,
diff --git a/src/client/index.scss b/src/client/index.scss
index f2b4934..68d273c 100644
--- a/src/client/index.scss
+++ b/src/client/index.scss
@@ -6,6 +6,7 @@
 @import '../../node_modules/bulma/sass/elements/tag';
 @import '../../node_modules/bulma/sass/elements/box';
 @import '../../node_modules/bulma/sass/elements/content';
+@import '../../node_modules/bulma/sass/elements/container';
 @import '../../node_modules/bulma/sass/elements/other';
 @import '../../node_modules/bulma/sass/components/navbar';
 @import '../../node_modules/bulma/sass/components/panel';
@@ -169,7 +170,7 @@ div.view {
   }
 }
 
-.ingestion-profile {
+.ingestion-profile-source-view {
   padding-top: 1rem;
   padding-bottom: 1rem;
   display: flex;
@@ -206,6 +207,10 @@ div.view {
   }
 }
 
+.ingestion-profile-mapping-view {
+  padding: 1rem;
+}
+
 .menu {
   font-weight: normal;
   overflow-y: scroll;
diff --git a/src/client/reducers/ingestion-profile.js b/src/client/reducers/ingestion-profile.js
index 58f47b4..8060ec6 100644
--- a/src/client/reducers/ingestion-profile.js
+++ b/src/client/reducers/ingestion-profile.js
@@ -13,6 +13,11 @@ const {
   defaultToEmptyMap,
 } = require('../util');
 
+const {
+  createPersistentClass,
+  createPersistentClassLink,
+} = require('../graph-schema');
+
 const initialState = fromJS({
   name: '',
   sources: [],
@@ -53,8 +58,8 @@ function reduce(state = initialState, action) {
 
     case actions.GRAPH_SCHEMA_UPDATE_CONTENT:
       return state.set('graphSchema', fromJS({
-        classes: action.classes,
-        classLinks: action.classLinks,
+        classes: R.defaultTo([], action.classes).map(createPersistentClass),
+        classLinks: R.defaultTo([], action.classLinks).map(createPersistentClassLink),
       }));
 
     case actions.GRAPH_SCHEMA_SET_EDITOR_CONTENT:
diff --git a/src/client/reducers/ui/ingestion-profile.js b/src/client/reducers/ui/ingestion-profile.js
index 9080f75..2396ca9 100644
--- a/src/client/reducers/ui/ingestion-profile.js
+++ b/src/client/reducers/ui/ingestion-profile.js
@@ -12,6 +12,8 @@ const initialState = fromJS({
   newSourceVisible: false,
   deleteSourceVisible: false,
   sample: null,
+  newNodeVisible: false,
+  newLinkVisible: false,
   activeTab: TAB_SOURCE,
 });
 
@@ -77,6 +79,12 @@ function reduceState(state = initialState, action) {
     case actions.INGESTION_PROFILE_SET_ACTIVE_TAB:
       return state.set('activeTab', action.tab);
 
+    case actions.INGESTION_PROFILE_REVEAL_NEW_NODE:
+      return state.set('newNodeVisible', true);
+
+    case actions.INGESTION_PROFILE_REVEAL_NEW_LINK:
+      return state.set('newLinkVisible', true);
+
     default:
       return state;
   }
diff --git a/src/client/selectors/ui/ingestion-profile.js b/src/client/selectors/ui/ingestion-profile.js
index 0962bbc..fcb5680 100644
--- a/src/client/selectors/ui/ingestion-profile.js
+++ b/src/client/selectors/ui/ingestion-profile.js
@@ -28,6 +28,12 @@ const selectedSourceSelector = (state) =>
 const sampleSelector = (state) =>
   state.getIn(['ui', 'ingestionProfile', 'sample']);
 
+const newNodeVisibleSelector = (state) =>
+  state.getIn(['ui', 'ingestionProfile', 'newNodeVisible']);
+
+const newLinkVisibleSelector = (state) =>
+  state.getIn(['ui', 'ingestionProfile', 'newLinkVisible']);
+
 module.exports = {
   newNameSelector,
   newVisibleSelector,
@@ -39,4 +45,6 @@ module.exports = {
   deleteSourceVisibleSelector,
   selectedSourceSelector,
   sampleSelector,
+  newNodeVisibleSelector,
+  newLinkVisibleSelector,
 };
